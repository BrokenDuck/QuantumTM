//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GraphColoring\",\"Name\":\"measureColor\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":33}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Given a qubit register, will return the integer\",\" corresponding the the binary in little endian format.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"measureColor\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GraphColoring\",\"Name\":\"measureColoring\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberElements\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":58}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Given a register of multiple colors in little endian format\",\" and the number of colors in the array,\",\" will return an array with the corresponding integers.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"measureColoring\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GraphColoring\",\"Name\":\"ColorEqualityOracle_Nbit\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":26,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c0\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":37},\"Item2\":{\"Line\":1,\"Column\":39}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":53}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":71}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"ColorEqualityOracle_Nbit\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":26,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"ColorEqualityOracle_Nbit\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":26,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":91},\"Item2\":{\"Line\":1,\"Column\":98}},\"Documentation\":[\"automatically generated QsAdjoint specialization for GraphColoring.ColorEqualityOracle_Nbit\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"ColorEqualityOracle_Nbit\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":26,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":91},\"Item2\":{\"Line\":1,\"Column\":98}},\"Documentation\":[\"automatically generated QsControlled specialization for GraphColoring.ColorEqualityOracle_Nbit\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"ColorEqualityOracle_Nbit\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":26,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":91},\"Item2\":{\"Line\":1,\"Column\":98}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for GraphColoring.ColorEqualityOracle_Nbit\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GraphColoring\",\"Name\":\"oracleConverter\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":48,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markingOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":79},\"Item2\":{\"Line\":1,\"Column\":87}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Converts a bit-flipping oracle in a phase-flipping oracle.\",\"\",\" # Description\",\" Applying a bit-flip to the |-> state converts it to -|->\",\" only flipping the phase.\",\"\",\" # Type Parameters\",\" ## Qubit[]\",\" The register to analyse\",\" ## Qubit\",\" The target qubit to flip\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"oracleConverter\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":48,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"oracleConverter\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":48,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":109},\"Item2\":{\"Line\":1,\"Column\":112}},\"Documentation\":[\"automatically generated QsAdjoint specialization for GraphColoring.oracleConverter\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GraphColoring\",\"Name\":\"groverAlgorithm\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":63,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markingOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":79},\"Item2\":{\"Line\":1,\"Column\":87}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":99},\"Item2\":{\"Line\":1,\"Column\":109}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Applies grovers algorithm when provided an bit-flip oracle, a register and the the number of iterations\",\"\",\" # Description\",\" View https://en.wikipedia.org/wiki/Grover%27s_algorithm\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"groverAlgorithm\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":63,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"groverAlgorithm\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":63,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":127},\"Item2\":{\"Line\":1,\"Column\":130}},\"Documentation\":[\"automatically generated QsAdjoint specialization for GraphColoring.groverAlgorithm\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GraphColoring\",\"Name\":\"vertexColoringOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":83,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"V\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"edges\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":47}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"colorsRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":64},\"Item2\":{\"Line\":1,\"Column\":78}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":90},\"Item2\":{\"Line\":1,\"Column\":96}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" The oracle to test the coloring of the graph\",\"\",\" # Description\",\" Will look at every edge and look if the colors of the two vertices are different,\",\" if all thee colors are different, will flip the target qubit\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"vertexColoringOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":83,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"vertexColoringOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":83,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":116},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsAdjoint specialization for GraphColoring.vertexColoringOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"vertexColoringOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":83,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":116},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsControlled specialization for GraphColoring.vertexColoringOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"vertexColoringOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":83,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":116},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for GraphColoring.vertexColoringOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GraphColoring\",\"Name\":\"graphColoringMain\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":129,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":30},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"V\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":78},\"Item2\":{\"Line\":1,\"Column\":79}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" When given an oracle and the number of vertices, will return a valid coloring if possible\",\"\",\" # Description\",\" Will try up to 10 iterations to find a valid coloring using @\\\"groverAlgorithm\\\" by :\",\" - Applying grovers algorithm with i iterations\",\" - Measuring the register\",\" - Verifying the solution with another qubit and the oracle\",\" - If the solution is True outputing the oracle using @\\\"measureColoring\\\", else repeating\",\"\",\" # Input\",\" ## oracle\",\" A black-box oracle which flips a qubit if the result is correct\",\" ## V\",\" The number of vertices of the graph\",\"\",\" # Output\",\" An array of integers representing the colors\",\"\",\" # Type Parameters\",\" ## Qubit[]\",\" The register of qubits the oracle should analyse\",\" ## Qubit\",\" The target qubbit the register flips if the answer is correct\",\"\",\" # Remarks\",\" The color register has to be of size 2*V since the maximum number of colors is 4 which can be stored in 2 bits\",\" (see : https://en.wikipedia.org/wiki/Four_color_theorem)\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"graphColoringMain\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":129,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GraphColoring\",\"Name\":\"wrapper\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"V\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":21}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"edges\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":34}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GraphColoring\",\"Name\":\"wrapper\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\jonathan\\\\Desktop\\\\QuantumTM\\\\Operations.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
#line hidden
namespace GraphColoring
{
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Body, 13, 21)]
    public partial class measureColor : Operation<IQArray<Qubit>, Int64>, ICallable
    {
        public measureColor(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "measureColor";
        String ICallable.FullName => "GraphColoring.measureColor";
        protected ICallable<IQArray<Result>, Int64> MicrosoftQuantumConvertResultArrayAsInt
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> MicrosoftQuantumMeasurementMultiM
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, Int64> Body => (__in__) =>
        {
            var register = __in__;
#line 14 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            return MicrosoftQuantumConvertResultArrayAsInt.Apply(MicrosoftQuantumMeasurementMultiM.Apply(register));
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumConvertResultArrayAsInt = this.Factory.Get<ICallable<IQArray<Result>, Int64>>(typeof(Microsoft.Quantum.Convert.ResultArrayAsInt));
            this.MicrosoftQuantumMeasurementMultiM = this.Factory.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __dataIn(IQArray<Qubit> data) => data;
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<measureColor, IQArray<Qubit>, Int64>(register);
        }
    }

    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Body, 21, 27)]
    public partial class measureColoring : Operation<(Int64,IQArray<Qubit>), IQArray<Int64>>, ICallable
    {
        public measureColoring(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item2)?.Qubits;
                }
            }
        }

        String ICallable.Name => "measureColoring";
        String ICallable.FullName => "GraphColoring.measureColoring";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysChunks
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysForEach
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Int64> measureColor
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Qubit>), IQArray<Int64>> Body => (__in__) =>
        {
            var (numberElements,register) = __in__;
#line 22 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var elementSize = (register.Length / numberElements);
#line 23 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var splicedArray = (IQArray<IQArray<Qubit>>)MicrosoftQuantumArraysChunks.Apply<IQArray<IQArray<Qubit>>>((elementSize, register));
#line 24 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            return MicrosoftQuantumArraysForEach.Apply<IQArray<Int64>>((measureColor, splicedArray));
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumArraysChunks = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Chunks<>));
            this.MicrosoftQuantumArraysForEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.ForEach<,>));
            this.measureColor = this.Factory.Get<ICallable<IQArray<Qubit>, Int64>>(typeof(measureColor));
        }

        public override IApplyData __dataIn((Int64,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 numberElements, IQArray<Qubit> register)
        {
            return __m__.Run<measureColoring, (Int64,IQArray<Qubit>), IQArray<Int64>>((numberElements, register));
        }
    }

    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Body, 27, 49)]
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Adjoint, 27, 49)]
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Controlled, 27, 49)]
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.ControlledAdjoint, 27, 49)]
    public partial class ColorEqualityOracle_Nbit : Unitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public ColorEqualityOracle_Nbit(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ColorEqualityOracle_Nbit";
        String ICallable.FullName => "GraphColoring.ColorEqualityOracle_Nbit";
        protected ICallable MicrosoftQuantumArraysZip
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumCanonControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (c0,c1,target) = __in__;
#line 28 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var (q0,q1) in MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)))
#line hidden
            {
#line 29 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicCNOT.Apply((q0, q1));
            }

#line 31 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((0L, MicrosoftQuantumIntrinsicX)).Apply((c1, target));
#line 32 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var (q0,q1) in MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)))
#line hidden
            {
#line 33 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicCNOT.Apply((q0, q1));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (c0,c1,target) = __in__;
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var (__qsVar2__q0__,__qsVar3__q1__) in MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1))?.Slice(new QRange((MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar2__q0__, __qsVar3__q1__));
            }

#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((0L, MicrosoftQuantumIntrinsicX)).Adjoint.Apply((c1, target));
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var (__qsVar0__q0__,__qsVar1__q1__) in MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1))?.Slice(new QRange((MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar0__q0__, __qsVar1__q1__));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(c0,c1,target)) = __in__;
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var (q0,q1) in MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)))
#line hidden
            {
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (q0, q1)));
            }

#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((0L, MicrosoftQuantumIntrinsicX)).Controlled.Apply((__controlQubits__, (c1, target)));
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var (q0,q1) in MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)))
#line hidden
            {
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (q0, q1)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(c0,c1,target)) = __in__;
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var (__qsVar2__q0__,__qsVar3__q1__) in MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1))?.Slice(new QRange((MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (__qsVar2__q0__, __qsVar3__q1__)));
            }

#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((0L, MicrosoftQuantumIntrinsicX)).Adjoint.Controlled.Apply((__controlQubits__, (c1, target)));
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var (__qsVar0__q0__,__qsVar1__q1__) in MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1))?.Slice(new QRange((MicrosoftQuantumArraysZip.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 27 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (__qsVar0__q0__, __qsVar1__q1__)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArraysZip = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Zip<,>));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumCanonControlledOnInt = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> c0, IQArray<Qubit> c1, Qubit target)
        {
            return __m__.Run<ColorEqualityOracle_Nbit, (IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((c0, c1, target));
        }
    }

    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Body, 49, 64)]
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Adjoint, 49, 64)]
    public partial class oracleConverter : Adjointable<(IAdjointable,IQArray<Qubit>)>, ICallable
    {
        public oracleConverter(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IAdjointable,IQArray<Qubit>)>, IApplyData
        {
            public In((IAdjointable,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "oracleConverter";
        String ICallable.FullName => "GraphColoring.oracleConverter";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (markingOracle,register) = __in__;
#line hidden
            {
#line 50 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                var target = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 51 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumIntrinsicX.Apply(target);
#line 52 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumIntrinsicH.Apply(target);
#line 53 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    markingOracle.Apply((register, target));
#line 54 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumIntrinsicH.Apply(target);
#line 55 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumIntrinsicX.Apply(target);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (markingOracle,register) = __in__;
#line 49 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            {
#line 49 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                var __qsVar0__target__ = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 49 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar0__target__);
#line 49 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumIntrinsicH.Adjoint.Apply(__qsVar0__target__);
#line 49 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    markingOracle.Adjoint.Apply((register, __qsVar0__target__));
#line 49 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumIntrinsicH.Adjoint.Apply(__qsVar0__target__);
#line 49 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar0__target__);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar0__target__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __dataIn((IAdjointable,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IAdjointable markingOracle, IQArray<Qubit> register)
        {
            return __m__.Run<oracleConverter, (IAdjointable,IQArray<Qubit>), QVoid>((markingOracle, register));
        }
    }

    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Body, 64, 84)]
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Adjoint, 64, 84)]
    public partial class groverAlgorithm : Adjointable<(IAdjointable,IQArray<Qubit>,Int64)>, ICallable
    {
        public groverAlgorithm(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IAdjointable,IQArray<Qubit>,Int64)>, IApplyData
        {
            public In((IAdjointable,IQArray<Qubit>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "groverAlgorithm";
        String ICallable.FullName => "GraphColoring.groverAlgorithm";
        protected IAdjointable<(IAdjointable,IQArray<Qubit>)> oracleConverter
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicZ
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysMost
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysTail
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(IAdjointable,IQArray<Qubit>,Int64), QVoid> Body => (__in__) =>
        {
            var (markingOracle,register,iterations) = __in__;
#line 65 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var phaseOracle = oracleConverter.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg1__) => (markingOracle, __arg1__)));
#line 66 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicH, register));
#line 67 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var i in new QRange(1L, iterations))
#line hidden
            {
#line 68 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                phaseOracle.Apply(register);
#line 69 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicH, register));
#line 70 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, register));
#line 71 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicZ.Controlled.Apply((MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(register), MicrosoftQuantumArraysTail.Apply<Qubit>(register)));
#line 72 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, register));
#line 73 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicH, register));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IAdjointable,IQArray<Qubit>,Int64), QVoid> AdjointBody => (__in__) =>
        {
            var (markingOracle,register,iterations) = __in__;
#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var __qsVar0__phaseOracle__ = oracleConverter.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg1__) => (markingOracle, __arg1__)));
#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            foreach (var __qsVar1__i__ in RangeReverse.Apply(new QRange(1L, iterations)))
#line hidden
            {
#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicH, register));
#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, register));
#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumIntrinsicZ.Controlled.Adjoint.Apply((MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(register), MicrosoftQuantumArraysTail.Apply<Qubit>(register)));
#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, register));
#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicH, register));
#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                __qsVar0__phaseOracle__.Adjoint.Apply(register);
            }

#line 64 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicH, register));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.oracleConverter = this.Factory.Get<IAdjointable<(IAdjointable,IQArray<Qubit>)>>(typeof(oracleConverter));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumIntrinsicZ = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.Z));
            this.MicrosoftQuantumArraysMost = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Most<>));
            this.MicrosoftQuantumArraysTail = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Tail<>));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((IAdjointable,IQArray<Qubit>,Int64) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IAdjointable markingOracle, IQArray<Qubit> register, Int64 iterations)
        {
            return __m__.Run<groverAlgorithm, (IAdjointable,IQArray<Qubit>,Int64), QVoid>((markingOracle, register, iterations));
        }
    }

    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Body, 84, 130)]
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Adjoint, 84, 130)]
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Controlled, 84, 130)]
    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.ControlledAdjoint, 84, 130)]
    public partial class vertexColoringOracle : Unitary<(Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public vertexColoringOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "vertexColoringOracle";
        String ICallable.FullName => "GraphColoring.vertexColoringOracle";
        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)> ColorEqualityOracle_Nbit
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumCanonControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (V,edges,colorsRegister,target) = __in__;
#line 85 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var numberEdges = edges.Length;
#line hidden
            {
#line 86 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                var correctness = Allocate.Apply(numberEdges);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 88 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    foreach (var i in new QRange(0L, (numberEdges - 1L)))
#line hidden
                    {
#line 89 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var (v0,v1) = edges[i];
#line 90 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ColorEqualityOracle_Nbit.Apply((colorsRegister?.Slice(new QRange((v0 * 2L), ((v0 * 2L) + 1L))), colorsRegister?.Slice(new QRange((v1 * 2L), ((v1 * 2L) + 1L))), correctness[i]));
                    }

#line 93 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((0L, MicrosoftQuantumIntrinsicX)).Apply((correctness, target));
#line 95 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    foreach (var i in new QRange(0L, (numberEdges - 1L)))
#line hidden
                    {
#line 96 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var (v0,v1) = edges[i];
#line 97 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ColorEqualityOracle_Nbit.Adjoint.Apply((colorsRegister?.Slice(new QRange((v0 * 2L), ((v0 * 2L) + 1L))), colorsRegister?.Slice(new QRange((v1 * 2L), ((v1 * 2L) + 1L))), correctness[i]));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(correctness);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (V,edges,colorsRegister,target) = __in__;
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var __qsVar0__numberEdges__ = edges.Length;
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                var __qsVar1__correctness__ = Allocate.Apply(__qsVar0__numberEdges__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    foreach (var __qsVar5__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__numberEdges__ - 1L))))
#line hidden
                    {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var (__qsVar6__v0__,__qsVar7__v1__) = edges[__qsVar5__i__];
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ColorEqualityOracle_Nbit.Adjoint.Adjoint.Apply((colorsRegister?.Slice(new QRange((__qsVar6__v0__ * 2L), ((__qsVar6__v0__ * 2L) + 1L))), colorsRegister?.Slice(new QRange((__qsVar7__v1__ * 2L), ((__qsVar7__v1__ * 2L) + 1L))), __qsVar1__correctness__[__qsVar5__i__]));
                    }

#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((0L, MicrosoftQuantumIntrinsicX)).Adjoint.Apply((__qsVar1__correctness__, target));
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__numberEdges__ - 1L))))
#line hidden
                    {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var (__qsVar3__v0__,__qsVar4__v1__) = edges[__qsVar2__i__];
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ColorEqualityOracle_Nbit.Adjoint.Apply((colorsRegister?.Slice(new QRange((__qsVar3__v0__ * 2L), ((__qsVar3__v0__ * 2L) + 1L))), colorsRegister?.Slice(new QRange((__qsVar4__v1__ * 2L), ((__qsVar4__v1__ * 2L) + 1L))), __qsVar1__correctness__[__qsVar2__i__]));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__correctness__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(V,edges,colorsRegister,target)) = __in__;
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var numberEdges = edges.Length;
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                var correctness = Allocate.Apply(numberEdges);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    foreach (var i in new QRange(0L, (numberEdges - 1L)))
#line hidden
                    {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var (v0,v1) = edges[i];
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ColorEqualityOracle_Nbit.Controlled.Apply((__controlQubits__, (colorsRegister?.Slice(new QRange((v0 * 2L), ((v0 * 2L) + 1L))), colorsRegister?.Slice(new QRange((v1 * 2L), ((v1 * 2L) + 1L))), correctness[i])));
                    }

#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((0L, MicrosoftQuantumIntrinsicX)).Controlled.Apply((__controlQubits__, (correctness, target)));
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    foreach (var i in new QRange(0L, (numberEdges - 1L)))
#line hidden
                    {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var (v0,v1) = edges[i];
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ColorEqualityOracle_Nbit.Adjoint.Controlled.Apply((__controlQubits__, (colorsRegister?.Slice(new QRange((v0 * 2L), ((v0 * 2L) + 1L))), colorsRegister?.Slice(new QRange((v1 * 2L), ((v1 * 2L) + 1L))), correctness[i])));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(correctness);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(V,edges,colorsRegister,target)) = __in__;
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var __qsVar0__numberEdges__ = edges.Length;
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                var __qsVar1__correctness__ = Allocate.Apply(__qsVar0__numberEdges__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    foreach (var __qsVar5__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__numberEdges__ - 1L))))
#line hidden
                    {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var (__qsVar6__v0__,__qsVar7__v1__) = edges[__qsVar5__i__];
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ColorEqualityOracle_Nbit.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (colorsRegister?.Slice(new QRange((__qsVar6__v0__ * 2L), ((__qsVar6__v0__ * 2L) + 1L))), colorsRegister?.Slice(new QRange((__qsVar7__v1__ * 2L), ((__qsVar7__v1__ * 2L) + 1L))), __qsVar1__correctness__[__qsVar5__i__])));
                    }

#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((0L, MicrosoftQuantumIntrinsicX)).Adjoint.Controlled.Apply((__controlQubits__, (__qsVar1__correctness__, target)));
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__numberEdges__ - 1L))))
#line hidden
                    {
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var (__qsVar3__v0__,__qsVar4__v1__) = edges[__qsVar2__i__];
#line 84 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ColorEqualityOracle_Nbit.Adjoint.Controlled.Apply((__controlQubits__, (colorsRegister?.Slice(new QRange((__qsVar3__v0__ * 2L), ((__qsVar3__v0__ * 2L) + 1L))), colorsRegister?.Slice(new QRange((__qsVar4__v1__ * 2L), ((__qsVar4__v1__ * 2L) + 1L))), __qsVar1__correctness__[__qsVar2__i__])));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__correctness__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.ColorEqualityOracle_Nbit = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>>(typeof(ColorEqualityOracle_Nbit));
            this.MicrosoftQuantumCanonControlledOnInt = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 V, IQArray<(Int64,Int64)> edges, IQArray<Qubit> colorsRegister, Qubit target)
        {
            return __m__.Run<vertexColoringOracle, (Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid>((V, edges, colorsRegister, target));
        }
    }

    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Body, 130, 158)]
    public partial class graphColoringMain : Operation<(IUnitary,Int64), IQArray<Int64>>, ICallable
    {
        public graphColoringMain(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IUnitary,Int64)>, IApplyData
        {
            public In((IUnitary,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "graphColoringMain";
        String ICallable.FullName => "GraphColoring.graphColoringMain";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message
        {
            get;
            set;
        }

        protected IAdjointable<(IAdjointable,IQArray<Qubit>,Int64)> groverAlgorithm
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> MicrosoftQuantumMeasurementMultiM
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetZ
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), IQArray<Int64>> measureColoring
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll
        {
            get;
            set;
        }

        public override Func<(IUnitary,Int64), IQArray<Int64>> Body => (__in__) =>
        {
            var (oracle,V) = __in__;
#line 131 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var coloring = QArray<Int64>.Create(V);
#line hidden
            {
#line 133 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                var (register,output) = (Allocate.Apply((2L * V)), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 134 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    var correct = false;
#line 135 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    var iterations = 1L;
#line 136 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    while (true)
                    {
#line 137 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        Message.Apply(String.Format("Trying iteration {0}", iterations));
#line 138 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        groverAlgorithm.Apply((oracle, register, iterations));
#line 139 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        var temp = (IQArray<Result>)MicrosoftQuantumMeasurementMultiM.Apply(register);
#line 140 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        oracle.Apply((register, output));
#line 141 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        if ((MicrosoftQuantumMeasurementMResetZ.Apply(output) == Result.One))
                        {
#line 142 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                            correct = true;
#line 143 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                            coloring = new QArray<Int64>(measureColoring.Apply((V, register)));
                        }

#line 145 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        ResetAll.Apply(register);
                        if ((correct || (iterations > 10L)))
                        {
                            break;
                        }
                        else
                        {
#line 149 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                            iterations = (iterations + 1L);
                        }
                    }

#line 151 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                    if (!(correct))
                    {
#line 152 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
                        throw new ExecutionFailException("No valid coloring was found");
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(register);
#line hidden
                        Release.Apply(output);
                    }
                }
            }

#line 155 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            return coloring;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Message = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.groverAlgorithm = this.Factory.Get<IAdjointable<(IAdjointable,IQArray<Qubit>,Int64)>>(typeof(groverAlgorithm));
            this.MicrosoftQuantumMeasurementMultiM = this.Factory.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(Microsoft.Quantum.Measurement.MultiM));
            this.MicrosoftQuantumMeasurementMResetZ = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetZ));
            this.measureColoring = this.Factory.Get<ICallable<(Int64,IQArray<Qubit>), IQArray<Int64>>>(typeof(measureColoring));
            this.ResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn((IUnitary,Int64) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IUnitary oracle, Int64 V)
        {
            return __m__.Run<graphColoringMain, (IUnitary,Int64), IQArray<Int64>>((oracle, V));
        }
    }

    [SourceLocation("C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs", OperationFunctor.Body, 158, -1)]
    public partial class wrapper : Operation<(Int64,IQArray<(Int64,Int64)>), IQArray<Int64>>, ICallable
    {
        public wrapper(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<(Int64,Int64)>)>, IApplyData
        {
            public In((Int64,IQArray<(Int64,Int64)>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "wrapper";
        String ICallable.FullName => "GraphColoring.wrapper";
        protected IUnitary<(Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)> vertexColoringOracle
        {
            get;
            set;
        }

        protected ICallable<(IUnitary,Int64), IQArray<Int64>> graphColoringMain
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<(Int64,Int64)>), IQArray<Int64>> Body => (__in__) =>
        {
            var (V,edges) = __in__;
#line 159 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            var transformedOracle = vertexColoringOracle.Partial(new Func<(IQArray<Qubit>,Qubit), (Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>((__arg1__) => (V, edges, __arg1__.Item1, __arg1__.Item2)));
#line 160 "C:\\Users\\jonathan\\Desktop\\QuantumTM\\Operations.qs"
            return graphColoringMain.Apply((transformedOracle, V));
        }

        ;
        public override void Init()
        {
            this.vertexColoringOracle = this.Factory.Get<IUnitary<(Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>>(typeof(vertexColoringOracle));
            this.graphColoringMain = this.Factory.Get<ICallable<(IUnitary,Int64), IQArray<Int64>>>(typeof(graphColoringMain));
        }

        public override IApplyData __dataIn((Int64,IQArray<(Int64,Int64)>) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 V, IQArray<(Int64,Int64)> edges)
        {
            return __m__.Run<wrapper, (Int64,IQArray<(Int64,Int64)>), IQArray<Int64>>((V, edges));
        }
    }
}